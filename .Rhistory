x <- 5 + 7
x
y <- x - 3
y
z <- c(1.1, 9. 3.14)
z <- c(1.1, 9, 3.14)
?c
z
c(2, 555, z)
c(z, 555, z)
z * 2 + 100
mysqrt <- sqrt(z - 1)
mySqrt <- sqrt(z - 1)
mySqrt
myDiv <- z / mySqrt
myDiv
c(1, 2, 3, 4) + c(0, 10)
c(1, 2, 3, 4) + c(0, 10, 100)
1:20
p1:10
pi:10
15:1
?`:`
seq(1,20)
seq(0, 10, by=0.5)
my_seq < - seq(5, 10, length = 30)
my_seq <- seq(5, 10, length = 30)
length(my_seq)
1:length(my_seq)
seq(along = my_seq)
seq_along(my_seq)
rep(0, times = 40)
rep(c(0, 1, 2), times = 10)
rep(c(0, 1, 2), each = 10)
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("My","name","is")
my_char
paste(my_char, collapse = " ")
my_name <- c(my_char,"Rembrandt")
my_name
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
paste(1:3,c("X","Y","Z"),sep="")
paste(LETTERS, 1:4,
| sep = "-")
paste(LETTERS, 1:4, sep = "-")
x <- c(44, NA, 5, NA)
x * 3
y <- rnorm(1000)
z<- rep(NA, 1000)
myData <- sample(c(y, z), 100)
myNa <- is.na(myData)
myNA <- is.na(myData)
myNA
myData == NA
sum(myNA)
myData
0 / 0
Inf - Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y > 0]
x[x > 0]
x[!is.na(x) & x > 0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11, 2, NA)
names(vect2)<-c("foo","bar","norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo","bar")]
myVector <- 1:20
myVector
dim(myVector)
length(myVector)
dim(myVector)<- c(4,5)
dim(myVector)
attributes(myVector)
myVector
class(myVector)
myMatrix <- myVector
?matrix
myMatrix2 <- matrix(1:20,4,5)
identical(myMatrix, myMatrix2)
patients <- c("Bill","Gina","Kelly","Sean")
cbind(patients, myMatrix)
mydata <- data.frame(patients, myMatrix)
myData <- data.frame(patients, myMatrix)
myData
class(myData)
cnames <- c("patient","age","weight","bp","rating","test")
colnames(myData) <- cnames
myData
savehistory("C:/Users/Rembrandt/Desktop/data.Rhistory")
savehistory("~/R/R.history")
install.packages("KernSmooth")
library("KernSmooth")
setwd("D:/Courses/Data Science Specialization/Data Scientistâ€™s Toolbox/Homeworks")
install.packages("httr")
content(req)
install.packages("httpuv")
req <- GET("https://api.github.com/users/jtleek/repos", config(token = github_token))
library(httpuv)
content(req)
library(httr)
library(httpuv)
oauth_endpoints("github")
# Use the credentials provided with application
myapp <- oauth_app("github",key="8c682d54278754825430",secret = "50d50ddd36b9f6cbb0e585d7597d022dea66c668")
# get credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
library(httr)
library(httpuv)
oauth_endpoints("github")
# Use the credentials provided with application
myapp <- oauth_app("github",key="8c682d54278754825430",secret = "50d50ddd36b9f6cbb0e585d7597d022dea66c668")
# get credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
install.packages("jsonlite")
library(httr)
library(httpuv)
# use a github defined application
myapp <- oauth_app("github",key="8c682d54278754825430",secret = "50d50ddd36b9f6cbb0e585d7597d022dea66c668")
# sign in in github
sig <- (myapp, token="9478c897fb9d1504c55081d87b26cec1ae772ca3")
# access to the url
req  <- GET("https://api.github.com/users/jtleek/repos", sig)
page <- content(req)
json <- jsonlite::fromJSON(toJSON(data))
json
library(httr)
library(httpuv)
# use a github defined application
myapp <- oauth_app("github",key="8c682d54278754825430",secret = "50d50ddd36b9f6cbb0e585d7597d022dea66c668")
# sign in in github
sig <- (myapp, token="9478c897fb9d1504c55081d87b26cec1ae772ca3")
# access to the url
req  <- GET("https://api.github.com/users/jtleek/repos", sig)
page <- content(req)
json <- jsonlite::fromJSON(toJSON(data))
json
library(httr)
library(httpuv)
library(jsonlite)
# use a github defined application
myapp <- oauth_app("github",key="8c682d54278754825430",secret = "50d50ddd36b9f6cbb0e585d7597d022dea66c668")
# sign in in github
sig <- (myapp, token="9478c897fb9d1504c55081d87b26cec1ae772ca3")
# access to the url
req  <- GET("https://api.github.com/users/jtleek/repos", sig)
page <- content(req)
json <- jsonlite::fromJSON(toJSON(page))
json
library(httr)
library(httpuv)
library(jsonlite)
# use a github defined application
myapp <- oauth_app("github",key="8c682d54278754825430",secret = "50d50ddd36b9f6cbb0e585d7597d022dea66c668")
# sign in in github
sig <- sign_oauth1.0(myapp, token="9478c897fb9d1504c55081d87b26cec1ae772ca3")
# access to the url
req  <- GET("https://api.github.com/users/jtleek/repos", sig)
page <- content(req)
json <- jsonlite::fromJSON(toJSON(page))
json
?sign_oauth1.0
library(httr)
library(httpuv)
library(jsonlite)
# use a github defined application
myapp <- oauth_app(oauth_endpoints("github"),key="8c682d54278754825430",secret = "50d50ddd36b9f6cbb0e585d7597d022dea66c668")
# sign in in github
sig <- sign_oauth1.0(myapp, token="9478c897fb9d1504c55081d87b26cec1ae772ca3")
# access to the url
req  <- GET("https://api.github.com/users/jtleek/repos", sig)
page <- content(req)
json <- jsonlite::fromJSON(toJSON(page))
json
stuff<-GET("https://api.github.com/users/jtleek/repos",authenticate("1234567890","x-oauth-basic","basic")) and
cat(content(stuff, "text"), "\n")
library(httr)
library(httpuv)
library(jsonlite)
stuff<-GET("https://api.github.com/users/jtleek/repos",authenticate("1234567890","x-oauth-basic","basic")) and
cat(content(stuff, "text"), "\n")
library(httr)
library(httpuv)
library(jsonlite)
#declare an endpoint
endpoint <- oauth_endpoints("github")
# use a github defined application
myapp <- oauth_app(endpoint,key="8c682d54278754825430",secret = "50d50ddd36b9f6cbb0e585d7597d022dea66c668")
# sign in in github
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# access to the url
req  <- GET("https://api.github.com/users/jtleek/repos", config(token = github_token))
page <- content(req)
json <- jsonlite::fromJSON(toJSON(page))
json
library(httr)
library(httpuv)
library(jsonlite)
#declare an endpoint
endpoint <- oauth_endpoints("github")
# use a github defined application
myapp <- oauth_app(endpoint,key="8c682d54278754825430",secret = "50d50ddd36b9f6cbb0e585d7597d022dea66c668")
# sign in in github
github_token <- oauth2.0_token(endpoint, myapp)
# access to the url
req  <- GET("https://api.github.com/users/jtleek/repos", config(token = github_token))
page <- content(req)
json <- jsonlite::fromJSON(toJSON(page))
json
library(httr)
library(httpuv)
library(jsonlite)
#declare an endpoint
endpoint <- oauth_endpoints("github")
# use a github defined application
myapp <- oauth_app(endpoint,key="8c682d54278754825430",secret = "50d50ddd36b9f6cbb0e585d7597d022dea66c668")
# sign in in github
github_token <- oauth2.0_token(endpoint, myapp)
# access to the url
req  <- GET("https://api.github.com/users/jtleek/repos", config(token = github_token))
page <- content(req)
json <- jsonlite::fromJSON(toJSON(page))
json
library(httr)
library(httpuv)
library(jsonlite)
#declare an endpoint
endpoint <- oauth_endpoints("github")
# use a github defined application
myapp <- oauth_app(endpoint,key="8c682d54278754825430",secret = "50d50ddd36b9f6cbb0e585d7597d022dea66c668")
# sign in in github
github_token <- oauth2.0_token(endpoint, myapp)
# access to the url
req  <- GET("https://api.github.com/users/jtleek/repos", config(token = github_token))
#page <- content(req)
#json <- jsonlite::fromJSON(toJSON(page))
page <- content(req, "text", "\n")
json <-jsonlite::fromJSON(json1)
library(httr)
library(httpuv)
library(jsonlite)
#declare an endpoint
endpoint <- oauth_endpoints("github")
# use a github defined application
myapp <- oauth_app(endpoint,key="8c682d54278754825430",secret = "50d50ddd36b9f6cbb0e585d7597d022dea66c668")
# sign in in github
github_token <- oauth2.0_token(endpoint, myapp)
# access to the url
req  <- GET("https://api.github.com/users/jtleek/repos", config(token = github_token))
#page <- content(req)
#json <- jsonlite::fromJSON(toJSON(page))
page <- content(req, "text", "\n")
json <-jsonlite::fromJSON(page)
json
json[1:1:4]
library(httr)
library(httpuv)
library(jsonlite)
#declare an endpoint
endpoint <- oauth_endpoints("github")
# use a github defined application
myapp <- oauth_app(endpoint,key="8c682d54278754825430",secret = "50d50ddd36b9f6cbb0e585d7597d022dea66c668")
# sign in in github
github_token <- oauth2.0_token(endpoint, myapp)
# access to the url
req  <- GET("https://api.github.com/users/jtleek/repos", config(token = github_token))
#page <- content(req, "text", "\n")
#json <-jsonlite::fromJSON(page)
page <- content(req)
json <- jsonlite::fromJSON(toJSON(page))
debug(ls)
ls
ls
clear
cls
clc
ls
debug?
?debug
library(datasets)
data(iris)
?iris
iris
mean(iris$Sepal.Length)
apply(iris[, 1:4], 2, mean)
colMeans(iris)
rowMeans(iris[, 1:4])
apply(iris[, 1:4], 1, mean)
data(mtcars)
?mtcars
sapply(mtcars, cyl, mean)
apply(mtcars, 2, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
tapply(mtcars$hp, mtcars$cyl, avg)
tapply(mtcars$hp, mtcars$cyl, mean)
library(datasets)
data(iris)
# mean of Sepal.Length column
mean(iris$Sepal.Length)
# mean of numeric columns
apply(iris[, 1:4], 2, mean)
data(mtcars)
tapply(mtcars$mpg, mtcars$cyl, mean)
avghp <- tapply(mtcars$hp, mtcars$cyl, mean)
abs(avghp$4 - avghp$8)
library(datasets)
data(iris)
# mean of Sepal.Length column
mean(iris$Sepal.Length)
# mean of numeric columns
apply(iris[, 1:4], 2, mean)
data(mtcars)
tapply(mtcars$mpg, mtcars$cyl, mean)
avghp <- tapply(mtcars$hp, mtcars$cyl, mean)
abs(avghp$"4" - avghp$"8")
library(datasets)
data(iris)
# mean of Sepal.Length column
mean(iris$Sepal.Length)
# mean of numeric columns
apply(iris[, 1:4], 2, mean)
data(mtcars)
tapply(mtcars$mpg, mtcars$cyl, mean)
avghp <- tapply(mtcars$hp, mtcars$cyl, mean)
abs(avghp$[1] - avghp[3])
library(datasets)
data(iris)
# mean of Sepal.Length column
mean(iris$Sepal.Length)
# mean of numeric columns
apply(iris[, 1:4], 2, mean)
data(mtcars)
tapply(mtcars$mpg, mtcars$cyl, mean)
avghp <- tapply(mtcars$hp, mtcars$cyl, mean)
abs(avghp[1] - avghp[3])
library(datasets)
data(iris)
# mean of Sepal.Length column
mean(iris$Sepal.Length)
# mean of numeric columns
apply(iris[, 1:4], 2, mean)
data(mtcars)
tapply(mtcars$mpg, mtcars$cyl, mean)
avghp <- tapply(mtcars$hp, mtcars$cyl, mean)
avghp
abs(avghp[1] - avghp[3])
?iris
library(datasets)
data(iris)
# mean of Sepal.Length column
m[m[, "Species"] == "virginica",]
library(datasets)
data(iris)
# mean of Sepal.Length column
iris[iris[, "Species"] == "virginica",]
library(datasets)
data(iris)
# mean of Sepal.Length column for the row where the species is virginica
iris_virginica<-iris[iris[, "Species"] == "virginica",]
mean(iris_virginica$Sepal.Length)
library(datasets)
data(iris)
# mean of Sepal.Length column for the row where the species is virginica
iris_virginica<-iris[iris[, "Species"] == "virginica",]
mean(iris_virginica$Sepal.Length)
# mean of numeric columns
apply(iris[, 1:4], 2, mean)
data(mtcars)
tapply(mtcars$mpg, mtcars$cyl, mean)
with(mtcars, tapply(mpg, cyl, mean))
avghp <- tapply(mtcars$hp, mtcars$cyl, mean)
avghp
abs(avghp[1] - avghp[3])
set.seed(1)
rpois(5, 2)
set.seed(1)
rpois(5, 2)
set.seed(1)
rpois(5, 2)
set.seed(1)
rpois(5, 2)
set.seed(1)
rpois(5, 2)
set.seed(1)
rpois(5, 2)
set.seed(1)
rpois(5, 2)
?rnorm
?pnorm
?set.seed
?dpois
set.seed(10)
x <- rbinom(10, 10, 0.5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
x
y
e
?plot
plot(x, y)
plot(y, x)
?qpois
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
library(datasets)
Rprof()
x1<- (1:10)
x2<- (10:20)
y<- (20:30)
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
x1
x2
library(datasets)
Rprof()
x1<- (1:10)
x2<- (11:20)
y<- (21:30)
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
library(datasets)
Rprof()
x1<- (1:10)
x2<- (11:20)
y<- (21:30)
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
summaryRprof()
library(datasets)
Rprof()
x1<- (1:10)
x2<- (11:20)
y<- (21:30)
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
summaryRprof(by.total)
library(datasets)
Rprof()
x1<- (1:10)
x2<- (11:20)
y<- (21:30)
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
summaryRprof("by.total")
library(datasets)
Rprof()
x1<- (1:10)
x2<- (11:20)
y<- (21:30)
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
summaryRprof($by.total)
?summaryRpof
?summaryRprof
library(datasets)
Rprof()
x1<- (1:10)
x2<- (11:20)
y<- (21:30)
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
summaryRprof()
library(datasets)
Rprof()
x1<- (1:10)
x2<- (11:20)
y<- (21:30)
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
summaryRprof()
system.time()
?system.time
system.time("set.seed(10)")
install.packages("knitr")
install.packages("markdown")
?knit
??knit
?markdownToHTML
??markDownToHTML
setwd("D:/Courses/Data Science Specialization/Reproducible Research/Projects/RepData_PeerAssessment1")
library(knitr)
library(markdown)
knit("movement.Rmd") # convert to md
markdownToHTML("movement.md", "movement.html") # convert to HTML
# Reproducible Research: Peer Assessment 1
## Loading and preprocessing the data
```{r dataclean, echo=TRUE}
activitydata <- read.csv("./data/activity.csv")
activitydata$date <- as.Date(activitydata$date, "%Y-%m-%d")
```
## What is mean total number of steps taken per day?
## What is the average daily activity pattern?
## Imputing missing values
## Are there differences in activity patterns between weekdays and weekends?
